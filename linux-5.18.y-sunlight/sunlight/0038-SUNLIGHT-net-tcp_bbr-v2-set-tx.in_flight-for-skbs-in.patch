From 6f026f76a1569d9cfb92daf746a02dd3c7d2480d Mon Sep 17 00:00:00 2001
From: Ionut Nechita <ionut_n2001@yahoo.com>
Date: Fri, 22 Apr 2022 22:48:20 +0300
Subject: [PATCH 38/52] SUNLIGHT: net-tcp_bbr: v2: set tx.in_flight for skbs in
 repair write queue

Description:
 - Syzkaller was able to use TCP_REPAIR to reproduce the new warning
   added in tcp_fragment():

  WARNING: CPU: 0 PID: 118174 at net/ipv4/tcp_output.c:1487
    tcp_fragment+0xdcc/0x10a0 net/ipv4/tcp_output.c:1487()
  inconsistent: tx.in_flight: 0 old_factor: 53

 - The warning happens because skbs inserted into the tcp_rtx_queue
   during the repair process go through a sort of "fake send" process,
   and that process was seting pcount but not tx.in_flight, and thus the
   warnings (where old_factor is the old pcount).

 - The fix of setting tx.in_flight in the TCP_REPAIR code path seems
   simple enough, and indeed makes the repro code from syzkaller stop
   producing warnings. Running through kokonut tests, and will send out
   for review when all tests pass.

Effort: net-tcp_bbr
Origin-9xx-SHA1: 330f825a08a6fe92cef74d799cc468864c479f63
Change-Id: I0bc4a790f040fd4239620e1eedd5dc64666c6f05
Signed-off-by: Ionut Nechita <ionut_n2001@yahoo.com>
---
 net/ipv4/tcp_output.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/net/ipv4/tcp_output.c b/net/ipv4/tcp_output.c
index 0db920f342b4..96d1db553b01 100644
--- a/net/ipv4/tcp_output.c
+++ b/net/ipv4/tcp_output.c
@@ -2639,6 +2639,7 @@ static bool tcp_write_xmit(struct sock *sk, unsigned int mss_now, int nonagle,
 			skb_set_delivery_time(skb, tp->tcp_wstamp_ns, true);
 			list_move_tail(&skb->tcp_tsorted_anchor, &tp->tsorted_sent_queue);
 			tcp_init_tso_segs(skb, mss_now);
+			tcp_set_tx_in_flight(sk, skb);
 			goto repair; /* Skip network transmission */
 		}
 
-- 
2.35.1

